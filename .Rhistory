sep=df$Samples[i]),
row.names=NULL)
mge <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_mobilome.csv",
sep=df$Samples[i]),
row.names=NULL)
readlength <- fromJSON(
file = paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_reads_length.json",
sep=df$Samples[i]))
df$Read_Count[i] <- stats$V2[2]
df$ARG[i] <- as.integer(arg$Statistics[1])
df$MGE[i] <- as.integer(mge$Statistics[1])
df$LogARG[i] <- log2(1+as.numeric(arg$Statistics[1]))
df$LogMGE[i] <- log2(1+as.numeric(mge$Statistics[1]))
df$Total_Read_Length[i] <- sum(unlist(readlength))
df$Unique_Coloc[i] = as.integer(colocalizations_richness$V2[1])
}
for (i in 1:sample_count) {
if ((i-1)%%(sample_count/4) > 11) df$Chemistry[i] <- 'XT'
else  df$Chemistry[i] <- 'V2'
if ((i-1)%/%(sample_count/4) == 0) df$SampleType[i] <- 'Bovine'
else if ((i-1)%/%(sample_count/4) == 1) df$SampleType[i] <- 'Human'
else if ((i-1)%/%(sample_count/4) == 2) df$SampleType[i] <- 'Mock'
else df$SampleType[i] <- 'Soil'
if ((i-1)%%3 == 0) df$Random[i] <- 'A'
else if ((i-1)%%3 == 1) df$Random[i] <- 'B'
else df$Random[i] <- 'C'
df$MoreRandom[i] <- df$Random[i]
if ((i-1)%%(sample_count/8) < 3) df$Probe[i] <- 'ARG'
else if ((i-1)%%(sample_count/8) < 6) df$Probe[i] <- 'ARG-MGE'
else if ((i-1)%%(sample_count/8) < 9) df$Probe[i] <- 'MGE'
else {
df$Probe[i] <- 'None'
df$Random[i] <- df$Chemistry[i]
if ((i-1)%%12 == 9) df$MoreRandom[i] <-'ARG'
else if ((i-1)%%12 == 10) df$MoreRandom[i] <-'ARG-MGE'
else if ((i-1)%%12 == 11) df$MoreRandom[i] <-'MGE'
#if ((i-1)%%12 == 9) df$Random[i] <- paste(df$Chemistry[i],'ARG', sep="_")
#else if ((i-1)%%12 == 10) df$Random[i] <- paste(df$Chemistry[i],'ARG-MGE', sep="_")
#else if ((i-1)%%12 == 11) df$Random[i] <- paste(df$Chemistry[i],'MGE', sep="_")
df$Chemistry[i] <- 'None'
}
colocalizations_richness <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_colocalizations_richness.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL, comment.char="#")
stats <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_stats.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL)
arg <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_amr_diversity.csv",
sep=df$Samples[i]),
row.names=NULL)
mge <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_mobilome.csv",
sep=df$Samples[i]),
row.names=NULL)
readlength <- fromJSON(
file = paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_reads_length.json",
sep=df$Samples[i]))
df$Read_Count[i] <- stats$V2[2]
df$ARG[i] <- as.integer(arg$Statistics[1])
df$MGE[i] <- as.integer(mge$Statistics[1])
df$LogARG[i] <- log2(1+as.numeric(arg$Statistics[1]))
df$LogMGE[i] <- log2(1+as.numeric(mge$Statistics[1]))
df$Total_Read_Length[i] <- sum(unlist(readlength))
df$Unique_Coloc[i] = as.integer(colocalizations_richness$V2[1])
}
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe | MoreRandom)
+ (SampleType | Random),
data=df)
ranef(lmer.grand_fit)
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe | Random)
+ (SampleType | Random),
data=df)
ranef(lmer.grand_fit)
summary(lmer.grand_fit)
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe*SampleType | Random),
data=df)
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe:SampleType | Random),
data=df)
help('isSingular')
summary(lmer.grand_fit)
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe:SampleType + Probe| Random),
data=df)
summary(lmer.grand_fit)
ranef(lmer.grand_fit)
plot(lmer.grand_fit)
residuals(lmer.grand_fit)
abs(residuals(lmer.grand_fit)) > 1
residuals(lmer.grand_fit)[abs(residuals(lmer.grand_fit)) > 1]
residuals(lmer.grand_fit)[abs(residuals(lmer.grand_fit)) > .5]
residuals(lmer.grand_fit)[abs(residuals(lmer.grand_fit)) >= .5]
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe| Random),
data=df)
ranef(lmer.grand_fit)
summary(lmer.grand_fit)
residuals(lmer.grand_fit)[abs(residuals(lmer.grand_fit)) >= .5]
for (i in 1:sample_count) {
if ((i-1)%%(sample_count/4) > 11) df$Chemistry[i] <- 'XT'
else  df$Chemistry[i] <- 'V2'
if ((i-1)%/%(sample_count/4) == 0) df$SampleType[i] <- 'Bovine'
else if ((i-1)%/%(sample_count/4) == 1) df$SampleType[i] <- 'Human'
else if ((i-1)%/%(sample_count/4) == 2) df$SampleType[i] <- 'Mock'
else df$SampleType[i] <- 'Soil'
if ((i-1)%%3 == 0) df$Random[i] <- 'A'
else if ((i-1)%%3 == 1) df$Random[i] <- 'B'
else df$Random[i] <- 'C'
df$MoreRandom[i] <- df$Random[i]
if ((i-1)%%(sample_count/8) < 3) df$Probe[i] <- 'ARG'
else if ((i-1)%%(sample_count/8) < 6) df$Probe[i] <- 'ARG-MGE'
else if ((i-1)%%(sample_count/8) < 9) df$Probe[i] <- 'MGE'
else {
df$Probe[i] <- 'None'
df$Random[i] <- 'None'
#if ((i-1)%%12 == 9) df$Random[i] <- paste(df$Chemistry[i],'ARG', sep="_")
#else if ((i-1)%%12 == 10) df$Random[i] <- paste(df$Chemistry[i],'ARG-MGE', sep="_")
#else if ((i-1)%%12 == 11) df$Random[i] <- paste(df$Chemistry[i],'MGE', sep="_")
df$Chemistry[i] <- 'None'
}
colocalizations_richness <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_colocalizations_richness.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL, comment.char="#")
stats <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_stats.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL)
arg <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_amr_diversity.csv",
sep=df$Samples[i]),
row.names=NULL)
mge <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_mobilome.csv",
sep=df$Samples[i]),
row.names=NULL)
readlength <- fromJSON(
file = paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_reads_length.json",
sep=df$Samples[i]))
df$Read_Count[i] <- stats$V2[2]
df$ARG[i] <- as.integer(arg$Statistics[1])
df$MGE[i] <- as.integer(mge$Statistics[1])
df$LogARG[i] <- log2(1+as.numeric(arg$Statistics[1]))
df$LogMGE[i] <- log2(1+as.numeric(mge$Statistics[1]))
df$Total_Read_Length[i] <- sum(unlist(readlength))
df$Unique_Coloc[i] = as.integer(colocalizations_richness$V2[1])
}
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe| Random),
data=df)
summary(lmer.grand_fit)
ranef(lmer.grand_fit)
residuals(lmer.grand_fit)[abs(residuals(lmer.grand_fit)) >= .5]
for (i in 1:sample_count) {
if ((i-1)%%(sample_count/4) > 11) df$Chemistry[i] <- 'XT'
else  df$Chemistry[i] <- 'V2'
if ((i-1)%/%(sample_count/4) == 0) df$SampleType[i] <- 'Bovine'
else if ((i-1)%/%(sample_count/4) == 1) df$SampleType[i] <- 'Human'
else if ((i-1)%/%(sample_count/4) == 2) df$SampleType[i] <- 'Mock'
else df$SampleType[i] <- 'Soil'
if ((i-1)%%3 == 0) df$Random[i] <- 'A'
else if ((i-1)%%3 == 1) df$Random[i] <- 'B'
else df$Random[i] <- 'C'
df$MoreRandom[i] <- df$Random[i]
if ((i-1)%%(sample_count/8) < 3) df$Probe[i] <- 'ARG'
else if ((i-1)%%(sample_count/8) < 6) df$Probe[i] <- 'ARG-MGE'
else if ((i-1)%%(sample_count/8) < 9) df$Probe[i] <- 'MGE'
else {
df$Probe[i] <- 'None'
df$Random[i] <- df$Chemistry[i]
#if ((i-1)%%12 == 9) df$Random[i] <- paste(df$Chemistry[i],'ARG', sep="_")
#else if ((i-1)%%12 == 10) df$Random[i] <- paste(df$Chemistry[i],'ARG-MGE', sep="_")
#else if ((i-1)%%12 == 11) df$Random[i] <- paste(df$Chemistry[i],'MGE', sep="_")
df$Chemistry[i] <- 'None'
}
colocalizations_richness <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_colocalizations_richness.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL, comment.char="#")
stats <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_stats.csv",
sep=df$Samples[i]),
header=FALSE, row.names=NULL)
arg <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_amr_diversity.csv",
sep=df$Samples[i]),
row.names=NULL)
mge <- read.csv(
paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_SHORT_mobilome.csv",
sep=df$Samples[i]),
row.names=NULL)
readlength <- fromJSON(
file = paste("~/Documents/GitHub/TELS_analysis/TELS_output/sequel-demultiplex.",
".ccs.fastq_deduplicated.fastq_reads_length.json",
sep=df$Samples[i]))
df$Read_Count[i] <- stats$V2[2]
df$ARG[i] <- as.integer(arg$Statistics[1])
df$MGE[i] <- as.integer(mge$Statistics[1])
df$LogARG[i] <- log2(1+as.numeric(arg$Statistics[1]))
df$LogMGE[i] <- log2(1+as.numeric(mge$Statistics[1]))
df$Total_Read_Length[i] <- sum(unlist(readlength))
df$Unique_Coloc[i] = as.integer(colocalizations_richness$V2[1])
}
lmer.grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.grand_fit)
View(lmer.grand_fit)
View(lmer.grand_fit)
print(lmer.grand_fit, correlation=TRUE)
vcov(lmer.grand_fit)
summary(lmer.grand_fit)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.no_probe)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (SampleType| Random),
data=df)
summary(lmer.no_probe)
ranef(lmer.no_probe)
residuals(lmer.no_probe)[abs(residuals(lmer.no_probe)) >= .5]
residuals(lmer.no_probe)[abs(residuals(lmer.no_probe)) >= 1]
residuals(lmer.no_probe)[abs(residuals(lmer.no_probe)) >= 2]
residuals(lmer.no_probe)[abs(residuals(lmer.no_probe)) >= 5]
summary(lmer.no_probe)
lmer.no_sample <- lmer(Unique_Coloc ~ Probe
* Chemistry
* Total_Read_Length
+ (Probe| Random),
data=df)
summary(lmer.no_sample)
ranef(lmer.no_sample)
residuals(lmer.no_sample)[abs(residuals(lmer.no_sample)) >= .5]
residuals(lmer.no_sample)[abs(residuals(lmer.no_sample)) >= 5]
residuals(lmer.no_sample)[abs(residuals(lmer.no_sample)) >= 10]
residuals(lmer.no_sample)[abs(residuals(lmer.no_sample)) >= 20]
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (SampleType | Random)
+ (SampleType + Chemistry | Probe),
data=df)
summary(lmer.no_probe)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (SampleType | Random)
+ (SampleType + Chemistry | Probe),
data=df)
summary(lmer.no_probe)
ranef(lmer.no_probe)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (SampleType | Random),
data=df)
lmer.no_sample <- lmer(Unique_Coloc ~ Probe
* Chemistry
* Total_Read_Length
+ (Probe | Random),
data=df)
summary(lmer.no_sample)
residuals(lmer.no_sample)[abs(residuals(lmer.no_sample)) >= 20]
summary(lmer.no_sample)
lmer.no_chemistry <- lmer(Unique_Coloc ~ Probe
* SampleType
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.no_chemistry)
ranef(lmer.no_chemistry)
residuals(lmer.no_chemistry)[abs(residuals(lmer.no_chemistry)) >= .5]
residuals(lmer.no_chemistry)[abs(residuals(lmer.no_chemistry)) >= 5]
summary(lmer.no_chemistry)
lmer.no_length <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.no_length)
summary(lmer.no_sample)
summary(lmer.no_chemistry)
summary(lmer.no_length)
ranef(lmer.no_length)
residuals(lmer.no_length)[abs(residuals(lmer.no_length)) >= .5]
residuals(lmer.no_length)[abs(residuals(lmer.no_length)) >= 5]
summary(lmer.no_length)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (1+SampleType | Random),
data=df)
summary(lmer.no_probe)
residuals(lmer.no_probe)[abs(residuals(lmer.no_probe)) >= 5]
lmer.no_sample <- lmer(Unique_Coloc ~ Probe
* Chemistry
* Total_Read_Length
+ (1+Probe | Random),
data=df)
summary(lmer.no_sample)
lmer.no_probe <- lmer(Unique_Coloc ~ SampleType
* Chemistry
* Total_Read_Length
+ (SampleType | Random),
data=df)
lmer.no_sample <- lmer(Unique_Coloc ~ Probe
* Chemistry
* Total_Read_Length
+ (Probe | Random),
data=df)
fit_tels2 <- lm(data=df, Unique_Coloc ~ Probe * SampleType)
plot(fit_tels2)
View(fit_tels2)
profile(lmer.grand_fit)
fitted(lmer.grand_fit)
plot(x=df$Unique_Coloc, y=fitted(lmer.grand_fit))
plot(x=df$Unique_Coloc, y=round(fitted(lmer.grand_fit)))
plot(x=df$Unique_Coloc, y=fitted(lmer.grand_fit))
plot(x=df$Unique_Coloc, y=round(fitted(lmer.grand_fit)))
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
main <- "Unique Colocalization",
#xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
main <- "Unique Colocalization")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)))
table(main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)))
title(main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)))
title(main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
xlab <- "")
title(main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x <- df$Unique_Coloc,
y <- round(fitted(lmer.grand_fit)),
xlab = "")
title(main <- "Unique Colocalization",
xlab <- "Original Values",
ylab <- "Fitted Values")
plot(x = df$Unique_Coloc,
y = round(fitted(lmer.grand_fit)),
xlab = "")
title(main = "Unique Colocalization",
xlab = "Original Values",
ylab = "Fitted Values")
plot(x = df$Unique_Coloc,
y = round(fitted(lmer.grand_fit)),
main = "Unique Colocalization",
xlab = "Original Values",
ylab = "Fitted Values")
lmer.read_grand_fit <- lmer(Read_Count ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.read_grand_fit)
summary(lmer.read_grand_fit)
ranef(lmer.read_grand_fit)
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length)
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.coloc_grand_fit)
residuals(lmer.coloc_grand_fit)[abs(residuals(lmer.coloc_grand_fit)) >= .5]
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length)
+ (Probe | Random),
data=df)
summary(lmer.coloc_grand_fit)
residuals(lmer.coloc_grand_fit)[abs(residuals(lmer.coloc_grand_fit)) >= .5]
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length, base = 2)
+ (Probe + SampleType:Probe | Random),
data=df)
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length, base = 2)
+ (Probe  | Random),
data=df)
summary(lmer.coloc_grand_fit)
residuals(lmer.coloc_grand_fit)[abs(residuals(lmer.coloc_grand_fit)) >= .5]
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe  | Random),
data=df)
summary(lmer.coloc_grand_fit)
lmer.coloc_grand_fit <- lmer(Unique_Coloc ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
plot(x = df$Total_Read_Length,
y = df$Unique_Coloc,
main = "Unique Colocalization",
xlab = "Original Values",
ylab = "Fitted Values")
summary(lmer.coloc_grand_fit)
summary(lmer.read_grand_fit)
lmer.read_grand_fit <- lmer(Read_Count ~ Probe
* SampleType
* Chemistry
* Total_Read_Length
+ (Probe + SampleType:Probe | Random),
data=df)
ranef(lmer.read_grand_fit)
ranef(lmer.read_grand_fit)
summary(lmer.read_grand_fit)
ranef(lmer.read_grand_fit)
residuals(lmer.read_grand_fit)[abs(residuals(lmer.read_grand_fit)) >= .5]
lmer.read_grand_fit <- lmer(log(Read_Count) ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length)
+ (Probe + SampleType:Probe | Random),
data=df)
summary(lmer.read_grand_fit)
lmer.read_grand_fit <- lmer(log(Read_Count) ~ Probe
* SampleType
* Chemistry
* log(Total_Read_Length)
+ (Probe | Random),
data=df)
summary(lmer.read_grand_fit)
source("~/Documents/GitHub/TELS_analysis/linear_regression.R")
